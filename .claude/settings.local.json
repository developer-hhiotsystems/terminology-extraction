{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(docker:*)",
      "Bash(python:*)",
      "Bash(.venvScriptsactivate)",
      "Bash(pip install:*)",
      "Bash(./venv/Scripts/pip install:*)",
      "Bash(npm install)",
      "Bash(./venv/Scripts/python:*)",
      "Bash(./venv/Scripts/pytest tests/unit/test_example.py -v)",
      "Bash(npm audit fix:*)",
      "Bash(./venv/Scripts/pytest tests/unit -v)",
      "Bash(./venv/Scripts/pytest tests/integration -v)",
      "Bash(./venv/Scripts/pytest tests/ -v --tb=short)",
      "Bash(git --version)",
      "Bash(git init:*)",
      "Bash(git config:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(.venvScriptspytest tests/unit/test_models.py -v)",
      "Bash(.venvScriptspython.exe -m pytest tests/unit/test_models.py -v --tb=short)",
      "Bash(timeout:*)",
      "Bash(curl:*)",
      "Bash(tree:*)",
      "Bash(dir data)",
      "Bash(\"./venv/Scripts/pip\" show fastapi starlette)",
      "Bash(git log:*)",
      "Bash(npm run dev)",
      "Bash(powershell:*)",
      "Bash(dir:*)",
      "Bash(Select-String -Pattern \"documents\")",
      "Bash(./venv/Scripts/python.exe -c \"from src.backend.routers import documents; print(''Router imported successfully''); print(f''Router prefix: {documents.router.prefix}'')\")",
      "Bash(./venv/Scripts/python.exe:*)",
      "Bash(npm install:*)",
      "Bash(.venvScriptspython -c \"from src.backend.routers import admin; print(''Admin router imported successfully''); print(f''Router prefix: {admin.router.prefix}'')\")",
      "Bash(start \"Glossary Backend\" cmd /k \"cd /d \"\"C:\\Users\\devel\\Coding Projects\\Glossary APP\"\" && venv\\Scripts\\python.exe src\\backend\\app.py\")",
      "Bash(Select-String -Pattern \"admin\" -CaseSensitive)",
      "Bash(rm:*)",
      "Bash(start \"Glossary Backend\" cmd /k \"venv\\Scripts\\python.exe src\\backend\\app.py\")",
      "Bash(taskkill:*)",
      "Bash(cmd //c \"taskkill //F //IM python.exe //T\")",
      "Bash(cmd /c \"taskkill /F /IM python.exe 2>nul & taskkill /F /IM node.exe 2>nul & echo Processes killed\")",
      "Bash(start \"\" cmd /c \"start.bat\")",
      "Bash(find:*)",
      "Bash(cmd /c \"taskkill /F /IM python.exe 2>nul & echo Backend stopped\")",
      "Bash(start \"\" cmd /c \"cd /d \"\"C:\\Users\\devel\\Coding Projects\\Glossary APP\"\" && venv\\Scripts\\python.exe src\\backend\\app.py\")",
      "Bash(.\\venv\\Scripts\\python.exe:*)",
      "Bash(.venvScriptspython.exe -c \"import sys, json; data=json.load(sys.stdin); print(f''''Total glossary entries: {len(data)}''''); sample_docs = [d for d in data if ''''sample-technical-doc'''' in d.get(''''source_document'''', '''''''')]; print(f''''From sample-technical-doc.pdf: {len(sample_docs)}'''')\")",
      "Bash(npm run build:*)",
      "Bash(npm --prefix src/frontend run build)",
      "Bash(cmd /c \"scripts\\backend-stop.bat\")",
      "Bash(start \"\" cmd /c \"cd /d \"\"C:\\Users\\devel\\Coding Projects\\Glossary APP\"\" && scripts\\backend-dev.bat\")",
      "Bash(venvScriptsactivate)",
      "Bash(uvicorn:*)",
      "Bash(./venv/Scripts/uvicorn.exe:*)",
      "Bash(tasklist:*)",
      "Bash(findstr:*)",
      "Bash(cmd /c \"taskkill /F /IM python.exe /T 2>nul & echo Process kill attempted\")",
      "Bash(netstat:*)",
      "Bash(scriptsdev-start.bat)",
      "Bash(cmd /c \"cd /d C:\\Users\\devel\\Coding~ Projects\\Glossary~ APP && scripts\\dev-start.bat\")",
      "Bash(cmd /c \"netstat -ano | findstr :9123\")",
      "Bash(cmd /c \"tasklist | findstr python.exe\")",
      "Bash(cmd /c \"scripts\\dev-start.bat\")",
      "Bash(cmd /c \"timeout /t 3 >nul && netstat -ano | findstr :9123\")",
      "Bash(cmd /c \"timeout /t 3 >nul && tasklist | findstr python.exe\")",
      "Bash(cmd /c \"tasklist | findstr /I python\")",
      "Bash(cmd /c \"scripts\\dev-stop.bat\")",
      "Bash(.venvScriptspip.exe show openpyxl pandas)",
      "Bash(.venvScriptspython.exe -m pip list)",
      "Bash(cmd /c \"venv\\Scripts\\python.exe -m pip list | findstr /i pandas\")",
      "Bash(cmd /c \"venv\\Scripts\\pip.exe install pandas openpyxl\")",
      "Bash(cmd /c \"powershell -Command \"\"Get-Content ''src\\backend\\routers\\glossary.py'' | Select-Object -Last 50\"\"\")",
      "Bash(cmd /c \"timeout /t 5 /nobreak >nul && netstat -ano | findstr :9123\")",
      "Bash(cmd /c \"netstat -ano | findstr LISTENING | findstr :9123\")",
      "Bash(cmd /c \"netstat -ano | findstr LISTENING | findstr :3000\")",
      "Bash(cmd /c \"taskkill /F /FI \"WINDOWTITLE eq Glossary Backend*\" 2>nul || echo No backend window found\")",
      "Bash(cmd /c \"scripts\\backend-dev.bat\")",
      "Bash(cmd /c \"timeout /t 5 /nobreak >nul\")",
      "Bash(.venvScriptspython.exe -c \"import pandas; import openpyxl; print(''Packages installed successfully'')\")",
      "Bash(./venv/Scripts/pip.exe install:*)",
      "Bash(cmd /c \"netstat -ano | findstr :9123 | findstr LISTENING\")",
      "Bash(cmd /c \"timeout /t 3 /nobreak\")",
      "Bash(cmd /c \"timeout /t 8 /nobreak >nul\")",
      "Bash(cmd /c \"taskkill /F /IM python.exe /T 2>nul & echo Backend stopped\")",
      "Bash(cmd /c \"timeout /t 3 /nobreak >nul\")",
      "Bash(claude mcp list:*)",
      "Bash(cmd /c \"taskkill /F /IM python.exe /T 2>nul\")",
      "Bash(cmd /c \"timeout /t 15 /nobreak >nul\")",
      "Bash(cmd /c \"timeout /t 10 /nobreak >nul\")",
      "Bash(cmd /c \"venv\\Scripts\\python.exe src\\backend\\reset_database.py\")",
      "Bash(venv\\Scripts\\python.exe:*)",
      "Bash(cmd /c \"netstat -ano | findstr LISTENING | findstr :3001\")",
      "Bash(venvScriptspython.exe srcbackendapp.py)",
      "Bash(.venvScriptspython.exe srcbackendapp.py)",
      "Bash(cmd /c \"venv\\Scripts\\python.exe src\\backend\\app.py\")",
      "Bash(cmd /c \"timeout /t 5 /nobreak\")",
      "Bash(git reset -- nul openapi_temp.json test-app.js test-search.js test-data/ test-screenshots/)",
      "Bash(del nul)",
      "Bash(cmd /c \"if exist .env (echo .env exists) else (echo .env not found)\")",
      "Bash(.venvScriptspip.exe list)",
      "Bash(cmd /c \"venv\\Scripts\\pip.exe list | findstr neo4j\")",
      "Bash(cmd /c \"venv\\Scripts\\pip.exe install neo4j\")",
      "Bash(venvScriptspython.exe -m pip install neo4j)",
      "Bash(cmd /c \"cd /d C:\\Users\\devel\\Coding~ Projects\\Glossary~ APP && venv\\Scripts\\python.exe -m pip install neo4j\")",
      "Bash(cmd /c \"if exist requirements.txt (echo requirements.txt exists) else (echo requirements.txt not found)\")",
      "Bash(cmd /c \"if exist src\\backend\\requirements.txt (echo backend requirements.txt exists) else (echo backend requirements.txt not found)\")",
      "Bash(cmd /c \"powershell -Command \"\"(Get-Content ''src\\frontend\\src\\App.css'' | Measure-Object -Line).Lines\"\"\")",
      "Bash(cmd /c \"cd src\\frontend && npm run dev\")",
      "Bash(cmd /c \"timeout /t 3 /nobreak >nul && netstat -ano | findstr LISTENING | findstr :9123\")",
      "Bash(cmd /c \"timeout /t 5 /nobreak >nul && netstat -ano | findstr LISTENING | findstr :9123\")",
      "Bash(cmd /c \"curl -s http://localhost:9123/health\")",
      "Bash(cmd /c \"tasklist | findstr python\")",
      "Bash(cmd /c \"timeout /t 3 /nobreak >nul && curl -s http://localhost:9123/health\")",
      "Bash(cmd /c \"timeout /t 8 /nobreak >nul && curl -s http://localhost:9123/health\")"
    ],
    "deny": [],
    "ask": []
  }
}
